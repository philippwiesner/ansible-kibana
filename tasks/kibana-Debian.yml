---
- name: set fact force_install to no
  set_fact: force_install=no

- name: set fact force_install to yes
  set_fact: force_install=yes
  when: kibana_allow_downgrades | bool

- name: Debian - Install apt-transport-https to support https APT downloads
  become: yes
  apt: name=apt-transport-https state=present
  when: es_use_repository | bool
  register: result
  until: result is not failed
  retries: 5
  delay: 10

- name: Debian - Add Elasticsearch repository key
  become: yes
  apt_key: url="{{ es_apt_key }}" state=present
  when: es_use_repository  | bool and es_apt_key is defined | bool
  register: result
  until: result is not failed
  retries: 5
  delay: 10

- name: Debian - Add elasticsearch repository
  become: yes
  apt_repository: repo={{ item.repo }} state={{ item.state }} update_cache=yes
  loop:
    - { repo: "{{ es_apt_url_old }}", state: "absent" }
    - { repo: "{{ es_apt_url }}", state: "present" }
    - { repo: "{{ es_other_apt_url }}", state: "absent" }
  when: es_use_repository | bool

- name: Gracefully stop and remove kibana if we are switching version.
  block:
  - name: Debian - Check if other package is installed
    package_facts:
      manager: "auto"

  - name: Debian - stop {{ kibana_inverted_package_name }}
    become: yes
    service:
      name: '{{ instance_init_script | basename }}'
      state: stopped
    when: kibana_inverted_package_name in ansible_facts.packages

  - name: Debian - remove {{ kibana_inverted_package_name }}
    become: yes
    apt:
      name: "{{ kibana_inverted_package_name }}"
      state: absent
    when: kibana_inverted_package_name in ansible_facts.packages

- name: Debian - Ensure {{ kibana_package_name }} is installed
  become: yes
  apt:
    name: '{{ kibana_package_name }}{% if es_version is defined and es_version %}={{ es_version }}{% endif %}'
    state: present
    force: '{{ force_install }}'
    allow_unauthenticated: "{{ 'no' if es_apt_key else 'yes' }}"
    cache_valid_time: 86400
  when: es_use_repository | bool
  register: debian_kibana_install_from_repo
  notify: restart kibana
  until: debian_kibana_install_from_repo is not failed
  retries: 5
  delay: 10

- name: Debian - Include versionlock
  include: kibana-Debian-version-lock.yml
  when: kibana_version_lock | bool

- name: Debian - Download kibana from url
  get_url:
    url: >
      {% if kibana_custom_package_url is defined %}{{ kibana_custom_package_url }}
      {% else %}{{ kibana_package_url }}-{{ es_version }}-amd64.deb{% endif %}
    dest: "/tmp/kibana-{{ es_version }}.deb"
    validate_certs: no
  when: not es_use_repository

- name: Debian - Ensure kibana is installed from downloaded package
  become: yes
  apt: deb=/tmp/kibana-{{ es_version }}.deb
  when: not es_use_repository
  register: kibana_install_from_package
  notify: restart kibana
